name: Docker Build and Push

on:
  # PR 提交或更新时触发
  pull_request:
    branches: [main, master, develop]
    types: [opened, synchronize, reopened]

  # 合并到主分支时触发
  push:
    branches: [main, master]
    # 支持手动触发
  workflow_dispatch:

env:
  # 使用 vars 而不是 secrets 来存储用户名（推荐做法）
  DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/ruiqi-waf

jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 QEMU 用于多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录 Docker Hub（仅在推送时）
      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          # 使用 vars 存储用户名，secrets 存储密码/令牌
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 生成 Docker 元数据
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            # PR 时使用 pr-编号
            type=ref,event=pr
            # 分支名称  
            type=ref,event=branch
            # Git 短 SHA
            type=sha,prefix={{branch}}-,format=short
            # 当推送到主分支时，添加 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 语义化版本（当打 tag 时）
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # 构建 Docker 镜像（PR 时仅构建，不推送）
      - name: Build Docker image
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      # 构建并推送 Docker 镜像（合并时）
      - name: Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      # 输出构建信息
      - name: Build summary
        run: |
          echo "### Docker 构建完成 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "**镜像已推送到 Docker Hub**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 **镜像名称**: \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ **标签**:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | sed 's/,/\n/g' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "**PR 构建成功** ✅" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "这是一个 PR 构建，镜像未被推送到 Docker Hub。" >> $GITHUB_STEP_SUMMARY
          fi

      # PR 评论
      - name: Comment PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const emoji = success ? '✅' : '❌';
            const status = success ? '成功' : '失败';

            const body = `### Docker 构建${status} ${emoji}

            **PR #${{ github.event.pull_request.number }}** 的 Docker 镜像构建已完成。

            - **构建状态**: ${status}
            - **提交 SHA**: \`${{ github.event.pull_request.head.sha }}\`
            - **构建时间**: ${new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' })}

            ${success ? '镜像构建验证通过，可以安全合并。' : '请检查构建日志并修复问题。'}`;

            // 查找并更新现有评论，或创建新评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Docker 构建')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
